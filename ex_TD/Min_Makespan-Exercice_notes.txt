Min Makespan - Exercice (notes)
_________________________________


On propose un nouvel algorithme pour résoudre MIN MAKESPAN, que nous appellerons LPT (pour LARGEST PROCESSING TIME) :
	(a) ordonner les tâches suivant l’ordre décroissant de leur durée : d 0 1 ≥ d 0 2 ≥ . . . ≥ d 0 n
	(b) affecter les tâches aux machines comme dans l’algorithme LSA (voir Exercice 3.2 de la feuille TD3)



1.

	3 machines : M1, M2, M3
	11 taches : d1 = 2, d2 = 7, d3 = 1, d4 = 3, d5 = 2, d6 = 6, d7 = 2, d8 = 3, d9 = 6, d10 = 25, d11 = 5

	--> ordonnées de manières décroissantes : d2 > d6 > d9 > d11 > d4 > d8 > d1 > d5 > d7 > d10 > d3


______________________________________________________________________
M1 | d2                          | d8         | d5      |  d3|   
M2 | d6						| d11                  | d7      |		
M3 | d9						| d4         | d1      | d10     |             
______________________________________________________________________
T  0						6    7		 9    10   11   12   13 
______________________________________________________________________


2. 

	Ici on voit que tous les machines s'arretent au meme moment donc, on peut deduire que la solution est deja optimale, donc le ration d'approximation est egale a 1.

3.

	Montrer que : Tlpt(I) <= ((sum(k != j){d'k}) / m) + d'j 	(où j est la denière tâche)

	dans notre cas --> 13 <= (37 / 3) + 2 --> TRUE
	
	==> Tlpt(I) - d'j <= (sum(k != j){d'k}) / m
	==> (Tlpt(I) - d'j) * m <= sum(k != j){d'k}
	==> Tlpt(I) * m <= sum(k = 1, k = j){d'k}
	==> Tlpt(I) <= sum(k = 1, k = j){d'k} / m
	
	dans notre cas --> 13 * 3 <= 39 --> TRUE


4.

	supposons n <= m 		(avec n le nombre de tâchet et m le nombre de machine)
	
	--> cela signifie que chaque machine aura au plus 1 tâche à effectuer

	(a) Topt(I) >= sum(k = 1, k = n){d'k} / m
	(b) Tlpt(I) <= sum(k = 1, k = n){d'k} / m

	Tlpt(I) <= Topt(I) --> donc tjrs optimal


5.

	supposons n >= m + 1 	(avec n le nombre de tâche et m le nombre de machine)

	--> cela signifie qu'on a au moins m + 1 tâches, soit forcément plus de tâche que de machine

	Montrer que Topt(I) >= 2d'm+1

	dans notre cas --> 13 >= 2 * 3 --> TRUE

	Il s'agit de la m + 1 ème tâche, de fait elle sera donc exécutée en 2ème sur une machine.
	En effet, dans notre cas par exemple : ce sera la 4ème tâche pour 3 machines.

	De plus, la tâche qui sera exécutée sur cette machine avant (avant la m + 1 ème tâche) sera au moins aussi grande,
	car classée avant (et l'ordre est décroissant). Donc le temps opt dans le cas ou cette tâche (la m + 1 ème) est la dernière sera la somme de ce temps plus celui de la tâche exécuter avant sur cete machine.

	Donc Topt(I) >= 2d'm+1


6.

	Montrer que l'on distingue deux cas : 
		
		(a) Tlpt(I) = Topt(I) 
		(b) j >= m + 1 				(avec j le numéro de la dernière tâche)


	En effet, soit on a au plus autant de tâche que de machine --> (a)
	Soit on en a plus --> Topt(I) >= 2d'm+1


7.

	Montrer que Tlpt(I) <= r * Topt(I)


	r >= Tlpt(I) / Topt(I) = (sum(k = 1, k = j){d'k} / m) / 2d'm+1 ??



8. ??d





